name: CICD

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn compile

  security-check:
    runs-on: self-hosted
    needs: compile
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

      - name: Trivy FS scan
        run: trivy fs --format table -o fs-report.json .

  test:
    runs-on: self-hosted
    needs: security-check
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Unit Tests
        run: mvn test

  sonar-analysis:
    runs-on: self-hosted
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build project
        run: mvn package

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  aws-login:
    runs-on: self-hosted
    needs: sonar-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

     # - name: Install AWS CLI
       # run: |
        #  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        #  unzip awscliv2.zip
        #  sudo ./aws/install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{AWS_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

  docker-build-and-push-to-ecr:
    runs-on: self-hosted
    needs: aws-login
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Print Java version and JAVA_HOME
        run: |
          echo "JAVA_HOME is $JAVA_HOME"
          java -version
          javac -version

      - name: Build Jar using Java 17
        run: |
          export JAVA_HOME=${{ env.JAVA_HOME_17_X64 }}
          export PATH=$JAVA_HOME/bin:$PATH
          mvn clean package

      - name: Build Jar using Java 17
        run: mvn clean package
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{AWS_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.REPOSITORY_URI }}

      - name: Build Docker image
        run: |
          docker build -t github-action-sample .

      - name: Tag Docker image
        run: |
          docker tag github-action-sample ${{ secrets.REPOSITORY_URI }}:${{ secrets.IMAGE_TAG }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REPOSITORY_URI }}:${{ secrets.IMAGE_TAG }}

  deploy-to-eks:
    runs-on: self-hosted
    needs: docker-build-and-push-to-ecr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          sudo curl --silent --location -o /usr/local/bin/kubectl \
          https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
          sudo chmod +x /usr/local/bin/kubectl

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{AWS_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Helm Upgrade or Install
        run: |
          helm upgrade --install sampleapp-prod ./sampleapp \
            --namespace prod \
            --create-namespace \
            --values ./sampleapp/values-prod.yaml \
            --set image.repository=${{ secrets.REPOSITORY_URI }} \
            --set image.tag=${{ secrets.IMAGE_TAG }}
